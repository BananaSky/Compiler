statement: `@statement anyOf link main link function link assignment link pass`

basevalue: `@val anyOf literal string identifier ** literal ** keyword None keyword True keyword False`

value: `@val anyOf link basevalue link parenexpr`

lvalue: `@val identifier **`

expression: `@body link value operator ** link value`
boolexpression: `@body logicaloperator ** link expression`

parenexpr: '(' `link expression` ')'

main: 'if' '__name__' '==' `literal string` ':' `@body many link statement` 'end'

function: 'def' `@identifier identifier **` '(' `@args arglist` ')' ':' `@body *link statement` 'end' 

arglist: `*link expression`

pass: 'pass'

assignment: `@lval lvalue` `@op '='` `@rval literal **`
